1. When multiple tasks are executed on a single-threaded CPU, the tasks are scheduled based on the principle of pre-emption. when a higher-priority task arrives in the execution queue, then the lower-priority task is pre-empted, i.e. its execution is paused until the higher-priority task is complete.

There are n functions to be executed on a single-threaded CPU, with each function having a unique ID between 0 and n - 1. Given an integer n, representing the number of functions to be executed, and an execution log as an array of strings, logs, of size m, determine the exclusive times of each of the functions. Exclusive time is the sum of execution times for all calls to a function. Any string representing an execution log is of the form {function_id}:{"start"|"end"}:{timestamp}, indicating that the function with ID = function_id, either starts or ends at a time identified by the timestamp value

Note: While calculating the execution time of a function call, both the starting and ending times of the function call have to be included. The log of the form {function_id}:{start}: {timestamp} means that the running function is preempted at the beginning of timestamp second. The log of the form {function_id}:{end}: {timestamp} means that the function function_id is preempted after completing its execution at timestamp second i.e after timestamp second.

Example
Suppose n = 3, logs = ["0:start:0", "2:start:4", "2:end"5", "1:start:7","1:end"10","0:end:11"]


IDE
# Complete the 'getTotalExecutionTime' function below.
#
# The function is expected to return an INTEGEr
# The function accepts following parameters:
# 1. INTEGER n
# 2. STRING_ARRAY logs


2. Return a list of all students with at least one occurrence of a backlog item.

The result should be in the following format: student.name

> Schema
> Sample Data Tables 

IDE
/*
Enter your query below.
Pleas append a semicolon ";" at the end of the 
*/

SELECT DISTINCT S.NAME FROM STUDENT S
JOIN BACKLOG B ON S.ID = B.STUDENT_ID


_____________________________________________________________________________________________

The cost of a stock on each day is given in an array, arr. An investor wants to buy the stocks in triplets such that the sum of the cost for three days is divisible by d. The goal is to find the number of distinct triplets (i,j,k) such that i < j<k and the sum (a[i]+a[j]+a[k]) is divisible by d.

Example Let arr, prices of stock = [3, 3, 4, 7, 8] and d = 5. Following are the triplets whose sum is divisible by d (1-based indexing):

 Triplet with indices-(1, 2, 3), sum = 3+3+4 which is equal to 10
 • Triplet with indices-(1, 3, 5), sum = 3+4+8 which is equal to 15
 • Triplet with indices -(2, 3, 4), sum = 3+4+8 which is equal to 15

   Hence the answer is 3. 

Function Description
Complete the function get TripletCount in the editor below. The function must return an integer denoting the total number of distinct triplets. 
get TripletCount has the following parameters: 

arr[]: an array of integers 
d: an integer 
 
Constraints
 3 <= n <= 10 ^ 3 
 1 <= arr[i] <= 10 ^ 9
______

input :
arr = [2  3  1  6]
d = 3
output :
2

explanation : 
triplet index (1,2,3) , sum = 2+3+1 = 6
triplet index (1,3,4), sum = 2+1+6  = 9 

hence ans is 2

